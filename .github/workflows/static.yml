<!doctype html>
<html lang="zh-Hant">
<head>
  <meta charset="utf-8" /> <!-- 用 UTF-8 避免中文亂碼 -->
  <meta name="viewport" content="width=device-width,initial-scale=1" /> <!-- RWD 讓手機也好看 -->
  <title>互動吉他指板</title> <!-- 頁籤標題 -->
  <style>
    /* ===================== 深色主題色票（CSS 變數） ===================== */
    :root{
      --bg:#21242c;           /* 整體背景 */
      --panel:#161a22;        /* 頂部工具列背景 */
      --text:#e6e8ef;         /* 主要文字顏色 */
      --muted:#98a2b3;        /* 次要文字顏色 */
      --accent:#4f7cff;       /* 強調色（選單、邊框） */

      /* 音點顏色（以灰階為主） */
      --note:#d0d0d0;         /* 在音階內的音 */
      --note-neutral:#bfc5cf; /* 未顯示音階（none）時全部使用的中性灰 */
      --note-dim:#555b66;     /* 不在音階內的音（較暗） */

      --ghost:#2a3040;        /* 裝飾/預留色 */
      --fret:#243042;         /* 品絲顏色 */
      --fret-alt:#1e222c;     /* 指板底色 */

      --btn-bg:#111723;       /* 按鈕底色 */
      --btn-text:var(--text); /* 按鈕文字 */
      --btn-border:#2a3344;   /* 按鈕邊框 */
    }

    /* ===================== 明亮主題（切換 .light-theme 時啟用） ===================== */
    .light-theme{
      --bg:#fdfdfd; --panel:#f0f0f0; --text:#222; --muted:#666; --accent:#4f7cff;
      --note:#ffffff;          /* 在音階內的音（更亮） */
      --note-neutral:#d6d9df;  /* 未顯示音階時的中性灰（偏淡） */
      --note-dim:#d6d9df;      /* 不在音階內的音（更淡，降低干擾） */
      --ghost:#ddd; --fret:#bbb; --fret-alt:#e6e6e6; /* 指板/品絲更淺 */
      --btn-bg:#fff; --btn-text:#222; --btn-border:#ccc; /* 按鈕也跟著變亮 */
    }

    /* ===================== 全域 reset 與基本排版 ===================== */
    *{ box-sizing:border-box }                                 /* 盒模型統一 */
    body{                                                      /* 全頁基礎樣式 */
      margin:0;                                               /* 去邊距 */
      background:var(--bg);                                   /* 背景色 */
      color:var(--text);                                      /* 文字色 */
      font:16px/1.4 system-ui,-apple-system,"Segoe UI",Roboto,"Noto Sans TC",sans-serif; /* 系統字體 */
      transition:background .3s,color .3s;                    /* 主題切換過渡 */
    }
    header{                                                    /* 上方控制列 */
      padding:12px 16px; background:var(--panel);              /* 內距與底色 */
      display:flex; gap:10px; flex-wrap:wrap; align-items:center; /* 彈性排版 */
      transition:background .3s;                                /* 主題切換過渡 */
    }
    label{ font-size:12px; color:var(--muted); margin-right:6px } /* 標籤文字 */
    select, button{                                            /* 表單與按鈕 */
      accent-color:var(--accent);                              /* 原生控制的強調色 */
      background:var(--btn-bg); color:var(--btn-text);         /* 底色/文字 */
      border:1px solid var(--btn-border); border-radius:10px;  /* 邊框/圓角 */
      padding:6px 8px; font-size:14px;                         /* 內距/字級 */
      transition:background .3s,color .3s,border .3s;          /* 主題過渡 */
    }
    button{ cursor:pointer }                                   /* 滑鼠樣式 */
    button:disabled{ opacity:.5; cursor:not-allowed }          /* 禁用態 */
    main{ padding:16px }                                       /* 內容外距 */

    /* ===================== 指板容器與 SVG 基本樣式 ===================== */
    .board-wrap{                                               /* 可滾動容器 */
      overflow:auto; border:1px solid #222a3a; border-radius:14px; /* 邊框與圓角 */
      background:linear-gradient(#0c0f16,#0c1018);             /* 深色漸層背景 */
      transition:background .3s,border .3s;                    /* 主題過渡 */
    }
    .light-theme .board-wrap{ background:linear-gradient(#fff,#f7f7f7); border-color:#ccc } /* 亮色背景 */

    svg{ display:block; width:1600px; max-width:none }         /* 固定寬度畫布 */
    .string{ stroke:#b6bccb; stroke-width:1.6 }                /* 弦線樣式 */
    .fret{ stroke:var(--fret); stroke-width:2 }                /* 品絲線樣式 */
    .fret.first-fret{ stroke-width:9 }                         /* 第一格加粗（視覺 nut） */
    .fret-bg{ fill:var(--fret-alt) }                           /* 指板底色（從第2格開始鋪） */

    /* 音點樣式（圓形 + 內部標籤） */
    .note{ cursor:pointer; paint-order:stroke; stroke:#0b0e14; stroke-width:1.5; filter:drop-shadow(0 2px 4px rgba(0,0,0,.35)) }
    .note text{ font-weight:600; font-size:11px; fill:#0b0e14 }
    .note.marked circle{ fill:#f59e0b !important }             /* 單弦唯一標記色 */

    .marker-dot{ fill:#666; opacity:.4 }                       /* 品位定位點（4/6/8/10/16/18/20/22；13 雙點） */
  </style>
</head>
<body>
  <!-- ===================== 頂部控制列 ===================== -->
  <header>
    <!-- Key 選擇（調性根音） -->
    <div>
      <label>Key</label>
      <select id="keySel">
        <option>C</option><option>G</option><option>D</option><option>A</option><option>E</option>
        <option>B</option><option>F#</option><option>Db</option><option>Ab</option><option>Eb</option>
        <option>Bb</option><option>F</option>
      </select>
    </div>

    <!-- Scale 選擇（預設 Major） -->
    <div>
      <label>Scale</label>
      <select id="scaleSel">
        <option value="major" selected>Major</option>
        <option value="natural_minor">Natural Minor</option>
        <option value="penta_major">Pentatonic Major</option>
        <option value="penta_minor">Pentatonic Minor</option>
        <option value="none">（不顯示）</option>
      </select>
    </div>

    <!-- 標籤顯示模式（音名 or 度數） -->
    <div>
      <label>顯示</label>
      <select id="labelSel">
        <option value="note" selected>音名</option>
        <option value="degree">度數</option>
      </select>
    </div>

    <!-- 播放已標記音（向上掃弦） -->
    <button id="strumUpBtn" disabled>播放和弦</button>

    <!-- 主題切換（深/淺） -->
    <button id="themeToggle">切換明亮/暗色</button>
  </header>

  <!-- ===================== 指板區（SVG） ===================== -->
  <main>
    <div class="board-wrap">
      <svg id="board" viewBox="0 0 1600 320" aria-label="guitar fretboard"></svg>
    </div>
  </main>

  <!-- ===================== 主腳本：資料、繪圖、交互 ===================== -->
  <script>
    /* ===== 基本資料：音名、音階公式、標準調弦（由上到下：1~6弦） ===== */
    const NOTES_SHARP = ["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]; // 升記號音名表
    const NOTES_FLAT  = ["C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B"]; // 降記號音名表
    const SCALES = {                                           // 音階公式（相對根音的半音數）
      major:[0,2,4,5,7,9,11],
      natural_minor:[0,2,3,5,7,8,10],
      penta_major:[0,2,4,7,9],
      penta_minor:[0,3,5,7,10]
    };
    const STANDARD_TUNING = ["E4","B3","G3","D3","A2","E2"]; // 1弦(上)→6弦(下)

    /* ===== 工具函式：音高轉頻率、音名偏好、度數標籤、字串解析 ===== */
    let audioCtx = null;                                       // WebAudio 內容（延後建立）
    function ensureAudio(){                                     // 確保 audioCtx 存在
      if(!audioCtx) audioCtx = new (window.AudioContext||window.webkitAudioContext)();
    }
    const midiToFreq = m => 2 ** ((m - 69)/12) * 440;          // A4=69→440Hz，十二平均律
    const norm = n => ((n%12)+12)%12;                          // 任何整數轉 0~11
    function preferAccidental(key){                            // 根據 Key 選擇升/降記號
      const sharpKeys=["G","D","A","E","B","F#","C#"], flatKeys=["F","Bb","Eb","Ab","Db","Gb","Cb"];
      if(sharpKeys.includes(key)) return "sharp";
      if(flatKeys.includes(key))  return "flat";
      return "sharp";                                          // 其他預設升記號
    }
    function noteName(pc, keyName){                            // 取得顯示用音名
      return (preferAccidental(keyName)==="flat" ? NOTES_FLAT : NOTES_SHARP)[pc];
    }
    function degreeName(pc, rootPc){                           // 取得度數（含變音）
      const DEGREE_NAMES = ["1","b2","2","b3","3","4","b5","5","b6","6","b7","7"];
      return DEGREE_NAMES[norm(pc-rootPc)];
    }
    function parseNote(tok){                                   // 將如 "E2" 解析為 {pc, midi}
      const m = tok.match(/^([A-G](?:#|b)?)(\d)$/);
      const name=m[1], oct=+m[2];
      const pc = (NOTES_SHARP.indexOf(name)>=0 ? NOTES_SHARP.indexOf(name) : NOTES_FLAT.indexOf(name));
      return { pc, midi:(oct+1)*12 + pc };
    }

    /* ===== DOM 取得與控制 ===== */
    const board = document.getElementById('board');            // SVG 畫布
    const keySel = document.getElementById('keySel');          // Key 選單
    const scaleSel = document.getElementById('scaleSel');      // Scale 選單
    const labelSel = document.getElementById('labelSel');      // 顯示模式選單
    const upBtn = document.getElementById('strumUpBtn');       // 播放和弦按鈕
    const themeToggle = document.getElementById('themeToggle');// 主題切換按鈕
    themeToggle.addEventListener('click',()=> document.body.classList.toggle('light-theme')); // 切換主題

    // 單弦唯一標記：索引 0~5 對應 1~6 弦，值為被標記的 <g.note>
    let markedByString = [];
    function getMarkedMidis(){                                  // 取出所有被標記音的 MIDI
      return markedByString.filter(Boolean).map(g=> +g.dataset.midi);
    }
    function updatePlayBtns(){                                  // 無標記音則禁用播放
      upBtn.disabled = getMarkedMidis().length === 0;
    }

    /* ===== 音色：簡易吉他（諧波合成 + 指撥包絡） ===== */
    function playGuitarNotes(midis, delay=0){                   // 逐顆音依序延遲播放
      ensureAudio();
      midis.forEach((m,i)=>{
        const t = audioCtx.currentTime + i*delay;               // 本顆音的開始時間
        const f0 = midiToFreq(m);                               // 基頻 Hz
        const osc = audioCtx.createOscillator();                // 振盪器（波形來源）
        const g   = audioCtx.createGain();                      // 音量控制（做包絡）

        // 建立含諧波的週期波，模擬鋼弦的亮度（系數可再微調）
        const real = new Float32Array([0, 1.0, 0.45, 0.22, 0.11, 0.06]);
        const imag = new Float32Array(real.length);
        const wave = audioCtx.createPeriodicWave(real, imag);
        osc.setPeriodicWave(wave);
        osc.frequency.setValueAtTime(f0, t);

        // ADSR（極簡）：快速起音 → 較快衰減
        g.gain.setValueAtTime(0.0001, t);
        g.gain.exponentialRampToValueAtTime(0.5, t + 0.01);
        g.gain.exponentialRampToValueAtTime(0.0001, t + 1.0);

        // 串接節點並啟停
        osc.connect(g); g.connect(audioCtx.destination);
        osc.start(t); osc.stop(t + 1.1);
      });
    }

    // 播放按鈕：向上掃弦（由 6 弦→1 弦的感覺，故把 top→bottom 的陣列反轉）
    function strumUp(){ playGuitarNotes(getMarkedMidis().reverse(), 0.04); }
    upBtn.addEventListener('click', strumUp);

    /* ===== 主繪製：建立整個指板 ===== */
    function buildBoard(){
      // 狀態重置
      markedByString = [];                                      // 清除每弦標記
      updatePlayBtns();                                         // 更新按鈕可用性

      // 讀當前 UI 狀態
      const keyName  = keySel.value;                            // 當前 Key 名稱
      const scaleKey = scaleSel.value;                          // 當前 Scale key
      const labelMode= labelSel.value;                          // 顯示模式（音名/度數）

      // 依 keyName 算根音音高類別（0~11），並把 scale 轉成集合（快速查包含）
      const rootPc = (NOTES_SHARP.includes(keyName) ? NOTES_SHARP.indexOf(keyName) : NOTES_FLAT.indexOf(keyName));
      const scalePcs = new Set((SCALES[scaleKey]||[]).map(s=> norm(rootPc + s)));

      // 畫布與幾何參數（寬高、內距、格數、弦數）
      const width=1600, height=300, padX=60, padY=24;           // 整體畫布尺寸
      const fbX=padX, fbY=padY, fbW=1430, fbH=252;              // 指板框位置與大小
      const frets=24, strings=6;                                // 24 格、6 弦

      // 初始化 SVG
      board.setAttribute('viewBox', `0 0 ${width} ${height}`);  // 可縮放視窗
      board.innerHTML = '';                                     // 清空舊內容

      // 指板底色：從第二格開始鋪（第一格留空更像上弦枕區）
      const bg = document.createElementNS('http://www.w3.org/2000/svg','rect');
      bg.setAttribute('x', fbX + fbW*(1/(frets+0.5)));          // 從第2格的左邊開始
      bg.setAttribute('y', fbY);
      bg.setAttribute('width', fbW - fbW*(1/(frets+0.5)));
      bg.setAttribute('height', fbH);
      bg.setAttribute('class','fret-bg');
      board.appendChild(bg);

      // 畫弦線（x1 從第2格開始，避免穿過上弦枕視覺）
      for(let s=0; s<strings; s++){
        const y = fbY + fbH*(s+0.5)/strings;                    // 此弦 y 位置（置中）
        const line = document.createElementNS('http://www.w3.org/2000/svg','line');
        line.setAttribute('x1', fbX + fbW*(1/(frets+0.5)) );    // 從第2格開始畫
        line.setAttribute('x2', fbX + fbW );                    // 畫到指板右端
        line.setAttribute('y1', y); line.setAttribute('y2', y);
        line.setAttribute('class','string');
        board.appendChild(line);
      }

      // 畫 24 條品絲線，並在指定格放定位點
      for(let f=1; f<=frets; f++){
        const x = fbX + fbW*(f/(frets+0.5));                    // 第 f 格右邊緣 x
        const l = document.createElementNS('http://www.w3.org/2000/svg','line');
        l.setAttribute('x1',x); l.setAttribute('x2',x);         // 垂直線
        l.setAttribute('y1',fbY); l.setAttribute('y2',fbY+fbH);
        l.setAttribute('class', f===1 ? 'fret first-fret' : 'fret'); // 第一格加粗
        board.appendChild(l);

        // 單點定位（4/6/8/10/16/18/20/22）放在兩格中間
        if([4,6,8,10,16,18,20,22].includes(f)){
          const cx = x - fbW/(frets+0.5)/2;                     // 格中心 x
          const c = document.createElementNS('http://www.w3.org/2000/svg','circle');
          c.setAttribute('cx',cx); c.setAttribute('cy', fbY + fbH/2); c.setAttribute('r',6); c.setAttribute('class','marker-dot');
          board.appendChild(c);
        }
        // 第 13 格雙點（自定）
        if(f===13){
          const cx = x - fbW/(frets+0.5)/2; const y1 = fbY + fbH/3, y2 = fbY + fbH*2/3;
          [y1,y2].forEach(y=>{ const c=document.createElementNS('http://www.w3.org/2000/svg','circle'); c.setAttribute('cx',cx); c.setAttribute('cy',y); c.setAttribute('r',6); c.setAttribute('class','marker-dot'); board.appendChild(c); });
        }
      }

      // 畫 6×(24+1) 個音點（含開放弦 f=0）
      const tuning = STANDARD_TUNING.map(parseNote);            // 各弦開放弦 MIDI/音高類別
      for(let s=0; s<strings; s++){
        const open = tuning[s];                                 // 此弦開放弦資訊
        for(let f=0; f<=frets; f++){
          const midi = open.midi + f;                           // 此格實際 MIDI
          const pc   = norm(open.pc + f);                       // 此格音高類別 0~11

          // 計算音點中心座標（x 取格中心，y 取該弦水平線位置）
          const cx = fbX + fbW*((f+0.5)/(frets+0.5));
          const cy = fbY + fbH*(s+0.5)/strings;

          // 建 <g> 容器包住圓與文字，方便整體監聽點擊
          const g = document.createElementNS('http://www.w3.org/2000/svg','g');
          g.setAttribute('class','note'); g.dataset.midi = midi; g.dataset.string = s;

          // 圓點（底色依據是否顯示音階與是否在音階內）
          const circle = document.createElementNS('http://www.w3.org/2000/svg','circle');
          circle.setAttribute('cx',cx); circle.setAttribute('cy',cy); circle.setAttribute('r',12);
          const fillColor = (scaleSel.value==='none') ? 'var(--note-neutral)' : (scalePcs.has(pc)? 'var(--note)' : 'var(--note-dim)');
          circle.setAttribute('fill', fillColor);

          // 內文字（音名或度數）
          const label = document.createElementNS('http://www.w3.org/2000/svg','text');
          label.setAttribute('x',cx); label.setAttribute('y',cy+3); label.setAttribute('text-anchor','middle'); label.setAttribute('font-size','11'); label.setAttribute('fill','#0b0e14');
          label.textContent = (labelMode==='degree' && scaleKey!=='none') ? degreeName(pc, rootPc) : noteName(pc, keyName);

          // 組裝並掛上
          g.appendChild(circle); g.appendChild(label); board.appendChild(g);

          // 點擊互動：出聲 + 單弦唯一標記（toggle）
          g.addEventListener('click', ()=>{
            playGuitarNotes([midi]);                             // 立即發聲
            if(g.classList.contains('marked')){                 // 若已標記 → 取消
              g.classList.remove('marked'); markedByString[s] = null;
            }else{                                              // 若未標記 → 先清除此弦其它標記，再標記本格
              if(markedByString[s] && markedByString[s].isConnected){ markedByString[s].classList.remove('marked'); }
              g.classList.add('marked'); markedByString[s] = g;
            }
            updatePlayBtns();                                   // 依狀態啟用/停用播放鍵
          });
        }
      }
    }

    // 監聽 UI 變更即重畫
    [keySel, scaleSel, labelSel].forEach(el=> el.addEventListener('change', buildBoard));

    // 首次進入頁面立即建立指板
    buildBoard();
  </script>
</body>
</html>
